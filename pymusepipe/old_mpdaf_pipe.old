# Licensed under a 3-clause BSD style license - see LICENSE.rst

"""MUSE-PHANGS core module
"""

__authors__   = "Eric Emsellem"
__copyright__ = "(c) 2017, ESO + CRAL"
__license__   = "3-clause BSD License"
__contact__   = " <eric.emsellem@eso.org>"

# This module uses some mpdaf routines and wrap some of their
# functionalities to help the muse_pipe checkups

# Importing modules
import numpy as np

# Standard modules
import os
from os.path import join as joinpath

# Importing mpdaf
try :
    import mpdaf
except ImportError :
    raise Exception("mpdaf is required for this - MUSE related - module")

from mpdaf.obj import Cube
from mpdaf.obj import Image
from mpdaf.obj import Spectrum

# Astropy
from astropy.io import fits
from astropy import constants as const

from emission_lines import list_emission_lines

__version__ = '0.0.1 (15 March 2018)'

############################################################
#                      BEGIN
# The following parameters can be adjusted for the need of
# the specific pipeline to be used
############################################################

############################################################
#                      END
############################################################

def doppler_shift(wavelength, velocity=0.):
    """Return the redshifted wavelength
    """
    doppler_factor = np.sqrt((1. + velocity / const.c) / (1. - velocity / const.c))
    return wavelength * doppler_factor

#########################################################################
# Main class
#                           check_musepipe
#########################################################################

class muse_cube(object): 
    """Wrapper around the mpdaf Cube functionalities
    """
    
    def __init__(self, cube=None, cube_folder='./', cube_name=None, open_flag=True, verbose=False) :
        """Initialisation of the opening of cubes 
        This Class includes a few functions to extract a standard
        set of spectra from the Cube.
        """
        self.verbose = verbose
        # If muse cube is already defined
        if isinstance(cube, Cube) :
            open_flag = False
            self.cube_folder = None
            self.cube_name = None
            self._isCube = True
            self.cube = cube
        # Otherwise spectrum input
        # Cube input
        self.cube_folder = cube_folder
        self.cube_name = cube_name
        self._isCube = False

        # Open the cube and extract spectra if cube name is given
        if open_flag :
            self.open_cube(cube_folder, cube_name)

    def open_cube(self, cube_folder=None, cube_name=None) :
        """Open the cube
        """
        if cube_folder is not None : self.cube_folder = cube_folder
        if cube_name is not None : self.cube_name = cube_name
        # Check if cube exists
        if (self.cube_name is None) |  (not os.path.isfile(joinpath(self.cube_folder, self.cube_name))):
            if self.verbose:
                print("WARNING: No appropriate Cube name and folder defined")
            return

        # Opening the Cube
        self._isCube = True
        self.cube = Cube(joinpath(self.cube_folder, self.cube_name))

    def get_spectrum_from_cube(self, nx=None, ny=None, width=0) :
        if not self._isCube : 
            print("WARNING: No Cube is defined, yet")
            return

        if nx == None : nx = self.cube.shape[2] // 2
        if ny == None : ny = self.cube.shape[1] // 2
        width2 = width // 2
        return muse_spectrum(self.cube[:, ny - width2: ny + width2 + 1, 
                    nx - width2: nx + width2 + 1].sum(axis=(1,2)))

    def get_whiteimage_from_cube(self) :
        if not self._isCube : 
            print("WARNING: No Cube is defined, yet")
            return

        return self.cube.sum(axis=0)

    def get_image_from_cube(self, nlambda=None, width=0) :
        """Get image from integrated cube, with spectral pixel
        centred at nlambda and with a width of width
        """
        if not self._isCube : 
            print("WARNING: No Cube is defined, yet")
            return

        if nlambda == None : nlambda = self.cube.shape[0] // 2
        width2 = width // 2
        return self.cube[nlambda - width2: nlambda + width2 + 1, :, :].sum(axis=0)

    def get_set_spectra(self) :
        """Get a set of standard spectra from the Cube
        """
        if self._isCube :
            self.spec_fullgalaxy = muse_spectrum(self.cube.sum(axis=(1,2)))
            self.spec_4quad = self.get_quadrant_spectra_from_cube()
            self.spec_central_aper = museset_spectra([self.get_spectrum_from_cube(width=0), 
                   self.get_spectrum_from_cube(width=20), self.get_spectrum_from_cube(width=40)],
                   subtitle="central_spectra")

    def get_quadrant_spectra_from_cube(self, width=0) :
        """Get quadrant spectra from the Cube

        Input
        ----
        width : width of integration
        """
        if not self._isCube : 
            print("WARNING: No Cube is defined, yet")
            return

        ny4 = self.cube.shape[1] // 4
        nx4 = self.cube.shape[2] // 4
        nx34, ny34 = 3 * nx4, 3 * ny4

        spec1 = self.get_spectrum_from_cube( nx4,  ny4, width) 
        spec2 = self.get_spectrum_from_cube( nx4, ny34, width) 
        spec3 = self.get_spectrum_from_cube(nx34,  ny4, width) 
        spec4 = self.get_spectrum_from_cube(nx34, ny34, width) 
        return museset_spectra([spec1, spec2, spec3, spec4], subtitle="4 Quadrants")

    def get_emissionline_image(self, line=None, velocity=0., redshift=None, width=10, medium='vacuum') :
        """Get a narrow band image around Ha

        Input
        -----
        width: in Angstroems (10 by default). Width of the window of integration
        medium: vacuum or air (string, 'vacuum' by default)
        velocity: default is 0. (km/s)
        redshift: default is None. Overwrite velocity if provided.
        line: name of the emission line (see emission_lines dictionary)
        """
        if not self._isCube : 
            print("WARNING: No Cube is defined, yet")
            return

        index_line = {'vacuum': 0, 'air': 1}
        # Get the velocity
        if redshift is not None : velocity = redshift * const.c

        if line not in emission_lines :
            print("ERROR: could not guess the emission line you wish to use")
            print("ERROR: please review the 'emission_line' dictionary")
            return

        if medium not in index_line.keys() :
            print("ERROR: please choose between one of these media: {0}".format(index_line.key()))
            return

        wavel = emission_lines[line][index_line[medium]]
        red_wavel = doppler_shift[wavel, velocity]
        
        try :
            self.images[line] = self.cube.select_lambda(red_wavel - width/2., red_wavel + width/2.)
        except AttributeError :
            self.images = {}
            self.images[line] = self.cube.select_lambda(red_wavel - width/2., red_wavel + width/2.)

class muse_image(object): 
    """Wrapper around the mpdaf Image functionalities
    """
    
    def __init__(self, image=None, image_folder='.', image_name=None, open_flag=False, verbose=False, **kwargs) :
        """Initialisation of the opening of images
        """
        self.verbose = verbose
        # If muse image is already defined
        if isinstance(image, Image) :
            open_flag = False
            self.image_folder = None
            self.image_name = None
            self._isimages = True
            self.image = image
        # Otherwise image input
        else :
            self.image_folder = image_folder
            self.image_name = image_name
            self._isImage = False

        # Open the cube and extract spectra if cube name is given
        if open_flag :
             self.open_image(self.image_folder, self.image_name)

        # Arguments for the plots
        self.title = kwargs.get('title', "Frame")
        self.scale = kwargs.get('scale', "log")
        self.vmin = kwargs.get('vmin', "0")
        self.colorbar = kwargs.get('colorbar', "v")

    def open_image(self, image_folder=None, image_name=None) :
        """Open the image
        """
        if image_folder is not None : self.image_folder = image_folder
        if image_name is not None : self.image_name = image_name 

        if (self.image_name is None) | (not os.path.isfile(joinpath(self.image_folder, self.image_name))):
            if self.verbose:
                print("WARNING: No appropriate Image name and folder defined")
            return

        # Opening the image
        self._isImage = True
        self.image = Image(joinpath(self.image_folder, self.image_name))
        self.get_fwhm_startend()

    def get_fwhm_startend(self) :
        """Get range of FWHM
        """
        if self._isImage :
            self.fwhm_startobs = self.image.primary_header['HIERARCH ESO TEL AMBI FWHM START']
            self.fwhm_endobs = self.image.primary_header['HIERARCH ESO TEL AMBI FWHM END']
        else :
            if self.verbose :
                print("WARNING: image not yet opened, hence no header to be read")

class museset_images(object) :
    """Set of images
    """
    def __init__(self, images_list=None, subtitle="", add_number=True) :
        """Initialise the set of images
        """
        self.nimages = 0
        self.images = []
        self.subtitle = subtitle

        for image in images_list :
            self.add_image(image, add_number=add_number)

    def add_image(self, image, add_number=True) :
        """Add an image to the set
        """
        self.nimages += 1
        image.id = self.nimages
        if add_number :
            image.title += " {0:2d}".format(image.id)
        self.images.append(image)

class muse_spectrum(object): 
    """Wrapper around the mpdaf Spectrum functionalities
    """
    
    def __init__(self, spectrum=None, spectrum_folder='.', spectrum_name=None, open_flag=False, verbose=False, **kwargs) :
        """Initialisation of the opening of spectra
        """
        self.verbose = verbose

        # If muse spectrum is already defined
        if isinstance(spectrum, Spectrum) :
            open_flag = False
            self.spectrum_folder = None
            self.spectrum_name = None
            self._isspectrum = True
            self.spectrum = spectrum
        # Otherwise spectrum input
        else :
            self.spectrum_folder = spectrum_folder
            self.spectrum_name = spectrum_name
            self._isspectrum = False

        # Open the cube and extract spectra if cube name is given
        if open_flag :
             self.open_spectrum(spectrum_folder, spectrum_name)

        # Arguments for the plots
        self.title = kwargs.get('title', "Spectrum")

    def open_spectrum(self, spectrum_folder=None, spectrum_name=None) :
        """Open the spectrum
        """
        if spectrum_folder is not None : self.spectrum_folder = spectrum_folder
        if spectrum_name is not None : self.spectrum_name = spectrum_name

        if (self.spectrum_name is None) | (not os.path.isfile(joinpath(self.spectrum_folder, self.spectrum_name))):
            if self.verbose:
                print("WARNING: No appropriate spectrum name and folder defined")
            return

        # Opening the spectrum
        self._isspectrum = True
        self.spectrum = Spectrum(joinpath(self.spectrum_folder, self.spectrum_name))

class museset_spectra(object) :
    """Set of spectra
    """
    def __init__(self, spectra_list=None, subtitle="", add_number=True) :
        """Initialise the list
        """
        self.nspectra = 0
        self.spectra = []
        self.subtitle = subtitle

        for spectrum in spectra_list :
            self.add_spectrum(spectrum, add_number=add_number)

    def add_spectrum(self, spectrum, add_number=True) :
        """Add a spectrum to the set
        """
        self.nspectra += 1
        spectrum.id = self.nspectra
        if add_number :
            spectrum.title += " {0:2d}".format(spectrum.id)
        self.spectra.append(spectrum)
